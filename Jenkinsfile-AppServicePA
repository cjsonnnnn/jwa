pipeline {
  agent any

  tools {
    jfrog 'jfrog-cli'
  }

  options {
    buildDiscarder(logRotator(numToKeepStr: '5'))
  }

  parameters {
    string(name: 'IMAGE_TAG', description: 'Version tag (used for JAR build and artifact naming)')
  }

  stages {
    // stage('Build and Publish to Artifactory') {
    //   agent { label 'agent-maven' }
    //   steps {
    //     script {
    //       // 🧪 Setting Maven version
    //       sh "mvn versions:set -DnewVersion=${params.IMAGE_TAG} -DgenerateBackupPoms=false"
    //     }

    //     // 🔨 Building JAR
    //     sh "mvn clean package"

    //     // 📄 Listing built files
    //     sh "ls -lh target/"

    //     // 📦 Uploading to Artifactory
    //     jf "rt u target/demo-${params.IMAGE_TAG}.jar example-repo-local/target/ --flat=true"

    //     // 📝 Publishing build info
    //     jf "rt bp"
    //   }
    // }

    stage('Deploy to Azure App Service') {
      agent { label 'agent-azure' }
      steps {
        sh 'git --version'
        sh 'which git'
        sh "echo $HOME"
        sh "ls -la $HOME"
        sh "ls -la /var/jenkins_home"

        // 📦 Deploying to Azure App Service using personal login...
        sh "az version"
        sh "az account show"

        // 🔽 Download the JAR for deployment
        // jf "rt dl example-repo-local/target/demo-${params.IMAGE_TAG}.jar --flat=true"
        // sh "mv demo-${params.IMAGE_TAG}.jar app.jar"

        // 🚀 Deploy the JAR to App Service
        // sh '''
        //   az webapp deploy \
        //     --resource-group BelugaBoxResourceGroup01 \
        //     --name JWAAppServiceCodeTEST \
        //     --type jar \
        //     --src-path app.jar
        // '''
      }
    }
  }

  // post {
  //   always {
  //     script {
  //       // To prevent credentials being cached in memory or reused in other builds, and improve security
  //       sh "az logout || true"

  //       // Avoid race conditions (like logouts or container kills that take a second to finish)
  //       sleep(5)

  //       // Deletes all files/folders from the Jenkins agent's workspace
  //       // Ensures next builds start fresh, avoiding stale or leftover files (e.g., JARs, artifacts, Dockerfiles, logs).
  //       sh "ls -alR ${env.WORKSPACE}"
  //       cleanWs()
  //       sh "ls -alR ${env.WORKSPACE}"
  //     }
  //   }
  // }
}
