def remote = [:]
remote.name = 'vm-lab1'
remote.host = '192.168.18.21'
remote.allowAnyHosts = true

pipeline {
  agent any

  tools {
    jfrog 'jfrog-cli'
  }

  options {
    buildDiscarder(logRotator(numToKeepStr: '5'))
  }

  parameters {
    string(name: 'IMAGE_TAG', defaultValue: '0.0.112', description: 'Docker image tag to deploy')
  }

  environment {
    DOCKERHUB_CREDENTIALS = credentials('dockerhub-jpiay')
    PI_CREDS = credentials('ssh-vm-lab1')
  }

  stages {
    stage('Build and Publish to Artifactory') {
      agent { label 'agent-maven' }
      steps {
        sh 'mvn clean package'

        // Publish build info
        jf "rt bp"

        // Upload .jar to Artifactory
        jf "rt u target/*.jar example-repo-local/"
      }
    }

    stage('Docker') {
      agent { label 'agent-dind' }
      steps {
        // Download the built .jar file
        jf "rt dl example-repo-local/target/demo-${params.IMAGE_TAG}.jar --flat=true"

        // Build Docker image
        sh "docker build -t jpiay/jwa:${params.IMAGE_TAG} ."

        // Docker login
        sh "echo \$DOCKERHUB_CREDENTIALS_PSW | docker login -u \$DOCKERHUB_CREDENTIALS_USR --password-stdin"

        // Push to Docker Hub
        sh "docker push jpiay/jwa:${params.IMAGE_TAG}"

        // Deploy remotely
        script {
          remote.user = env.PI_CREDS_USR
          remote.password = env.PI_CREDS_PSW
        }

        sshCommand(remote: remote, command: """
          sudo docker pull jpiay/jwa:${params.IMAGE_TAG}
          sudo docker rm -f java-web-app || true
          sudo docker run -d --name java-web-app -p 8090:8080 --restart unless-stopped jpiay/jwa:${params.IMAGE_TAG}
        """)
      }
    }
  }

  post {
    always {
      script {
        // Optional: Clean up Docker and workspace
        sh "docker logout || true"
        sleep(5)
        cleanWs()
      }
    }
  }
}
