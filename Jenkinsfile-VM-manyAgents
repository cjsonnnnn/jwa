def remote = [:]
remote.name = 'vm-lab1'
remote.host = '192.168.18.21'
remote.allowAnyHosts = true

pipeline {
  agent any

  tools {
    jfrog 'jfrog-cli'
  }

  options {
    buildDiscarder(logRotator(numToKeepStr: '5'))
  }

  parameters {
    string(name: 'IMAGE_TAG', defaultValue: '0.0.112', description: 'Docker image tag to deploy')
  }

  environment {
    DOCKERHUB_CREDENTIALS = credentials('dockerhub-jpiay')
    PI_CREDS = credentials('ssh-vm-lab1')
  }

  stages {
    stage('Build and Publish to Artifactory') {
      agent { label 'agent-maven' }
      steps {
        script {
          echo "🧪 Setting Maven version to ${params.IMAGE_TAG}"
          sh "mvn versions:set -DnewVersion=${params.IMAGE_TAG} -DgenerateBackupPoms=false"
        }

        echo "🔨 Building JAR"
        sh 'mvn clean package'

        echo "📄 Listing built files"
        sh 'ls -lh target/'

        echo "📛 Renaming JAR to match IMAGE_TAG"
        sh "mv target/demo-*.jar target/demo-${params.IMAGE_TAG}.jar"

        echo "📦 Uploading to Artifactory"
        jf "rt u target/demo-${params.IMAGE_TAG}.jar example-repo-local/target/"

        echo "📝 Publishing build info"
        jf "rt bp"
      }
    }

    stage('Docker Build & Push') {
      agent { label 'agent-dind' }
      steps {
        echo "📥 Downloading from Artifactory"
        jf "rt dl example-repo-local/target/demo-${params.IMAGE_TAG}.jar --flat=true"

        echo "🔨 Building Docker image jpiay/jwa:${params.IMAGE_TAG}"
        sh "docker build -t jpiay/jwa:${params.IMAGE_TAG} ."

        echo "🔐 Docker login"
        sh "echo \$DOCKERHUB_CREDENTIALS_PSW | docker login -u \$DOCKERHUB_CREDENTIALS_USR --password-stdin"

        echo "🚀 Pushing Docker image to Docker Hub"
        sh "docker push jpiay/jwa:${params.IMAGE_TAG}"
      }
    }

    stage('Deploy to Remote Server') {
      agent { label 'agent-dind' }
      steps {
        script {
          echo "🖥️ Deploying to ${remote.host} with user ${env.PI_CREDS_USR}"
          remote.user = env.PI_CREDS_USR
          remote.password = env.PI_CREDS_PSW

          sshCommand(remote: remote, command: """
            echo '📦 Pulling Docker image jpiay/jwa:${params.IMAGE_TAG}'
            sudo docker pull jpiay/jwa:${params.IMAGE_TAG}

            echo '🧹 Stopping existing container if exists'
            sudo docker rm -f java-web-app || true

            echo '🚀 Starting new container'
            sudo docker run -d --name java-web-app -p 8090:8080 --restart unless-stopped jpiay/jwa:${params.IMAGE_TAG}
          """)
        }
      }
    }
  }

  post {
    always {
      script {
        echo "🧹 Cleaning up Docker session and workspace"
        sh "docker logout || true"
        sleep(5)
        cleanWs()
      }
    }
  }
}
