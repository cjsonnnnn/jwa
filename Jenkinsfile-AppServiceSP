pipeline {
  agent { label 'agent-azure' }

  tools {
    jfrog 'jfrog-cli'
  }

  options {
    buildDiscarder(logRotator(numToKeepStr: '5'))
  }

  parameters {
    string(name: 'IMAGE_TAG', description: 'Version tag (used for JAR build and artifact naming)')
  }

  environment {
    AZURE_APP_ID = credentials('azure-app-id')
    AZURE_SECRET_KEY = credentials('azure-secret-key')
    AZURE_TENANT_ID = credentials('azure-tenant-id')
  }

  stages {
    stage('Build and Publish to Artifactory') {
      agent { label 'agent-maven' }
      steps {
        sh "pwd"
        sh "ls -la"
        sh "ls -la $HOME"

        // ‚öôÔ∏è Set server to use 
        jf 'c use jfart-fos-1'

        script {
          // üß™ Setting Maven version
          sh "mvn versions:set -DnewVersion=${params.IMAGE_TAG} -DgenerateBackupPoms=false"
        }

        // üî® Building JAR
        retry(3) {
          sh "mvn clean package"
        }

        // üìÑ Listing built files
        sh "ls -lh target/"

        // üì¶ Uploading to Artifactory
        jf "rt u target/demo-${params.IMAGE_TAG}.jar example-repo-local/target/ --flat=true"

        // üìù Publishing build info
        jf "rt bp"
      }
    }

    stage('Deploy to Azure App Service') {
      steps {
        sh "git --version"
        sh "which git"
        sh "pwd"
        sh "ls -la"
        sh "ls -la $HOME"

        // üîê Logging in to Azure using Service Principal...
        sh "az version"
        sh '''
          az login --service-principal \
            --username "$AZURE_APP_ID" \
            --password "$AZURE_SECRET_KEY" \
            --tenant "$AZURE_TENANT_ID"
        '''
        sh "az account show"

        // üîΩ Download the JAR for deployment
        jf "rt dl example-repo-local/target/demo-${params.IMAGE_TAG}.jar --flat=true"
        sh "mv demo-${params.IMAGE_TAG}.jar app.jar"

        // üöÄ Deploy the JAR to App Service
        sh """
          az webapp deploy \
            --resource-group BelugaBoxResourceGroup01 \
            --name JWAAppServiceCodeTEST \
            --type jar \
            --src-path app.jar
        """
      }
    }
  }

  post {
    always {
      node('agent-azure') {
        script {
          // To prevent credentials being cached in memory or reused in other builds, and improve security
          sh "az logout || true"

          // Avoid race conditions (like logouts or container kills that take a second to finish)
          sleep(5)

          // Deletes all files/folders from the Jenkins agent's workspace
          // Ensures next builds start fresh, avoiding stale or leftover files (e.g., JARs, artifacts, Dockerfiles, logs).
          sh "ls -alR ${env.WORKSPACE}"
          cleanWs()
          sh "ls -alR ${env.WORKSPACE}"
        }
      }
    }
  }
}
